#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

// Function to check if a character is an operator
int isOperator(char ch) {
    if (ch == '+' || ch == '-' || ch == '*' || ch == '/')
        return 1;
    return 0;
}

// Function to get the precedence of an operator
int getPrecedence(char ch) {
    if (ch == '*' || ch == '/')
        return 2;
    else if (ch == '+' || ch == '-')
        return 1;
    return 0;
}

// Function to convert infix expression to postfix expression
void infixToPostfix(char infix[], char postfix[]) {
    int i, j;
    char stack[MAX_SIZE];
    int top = -1;

    // Push '(' to the stack
    stack[++top] = '(';

    // Append ')' to the end of infix expression
    strcat(infix, ")");

    i = 0;
    j = 0;

    while (infix[i] != '\0') {
        if (infix[i] == '(') {
            // Push '(' to the stack
            stack[++top] = '(';
        } else if (isOperator(infix[i])) {
            // Pop operators from the stack and append them to the postfix expression
            while (getPrecedence(stack[top]) >= getPrecedence(infix[i])) {
                postfix[j++] = stack[top--];
            }
            // Push the current operator to the stack
            stack[++top] = infix[i];
        } else if (infix[i] == ')') {
            // Pop operators from the stack and append them to the postfix expression until '(' is encountered
            while (stack[top] != '(') {
                postfix[j++] = stack[top--];
            }
            // Pop '(' from the stack
            top--;
        } else {
            // Append operands to the postfix expression
            postfix[j++] = infix[i];
        }
        i++;
    }

    postfix[j] = '\0';
}

int main() {
    char infix[MAX_SIZE];
    char postfix[MAX_SIZE];

    printf("Enter an infix expression: ");
    gets(infix);

    infixToPostfix(infix, postfix);

    printf("Postfix expression: %s\n", postfix);

    return 0;
}
