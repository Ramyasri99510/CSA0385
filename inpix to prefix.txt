#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

// Structure to represent a stack
struct Stack {
    int top;
    char items[MAX_SIZE];
};

// Function to initialize stack
void initialize(struct Stack* stack) {
    stack->top = -1;
}

// Function to check if stack is full
int isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to check if stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to push an item to stack
void push(struct Stack* stack, char item) {
    if (isFull(stack)) {
        printf("Stack Overflow\n");
        return;
    }
    stack->items[++stack->top] = item;
}

// Function to pop an item from stack
char pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow\n");
        return '\0';
    }
    return stack->items[stack->top--];
}

// Function to get the precedence of an operator
int getPrecedence(char operator) {
    if (operator == '+' || operator == '-')
        return 1;
    else if (operator == '*' || operator == '/')
        return 2;
    else if (operator == '^')
        return 3;
    else
        return 0;
}

// Function to check if a character is an operator
int isOperator(char character) {
    return (character == '+' || character == '-' || character == '*' || character == '/' || character == '^');
}

// Function to convert infix expression to prefix expression
void infixToPrefix(char infix[], char prefix[]) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    initialize(stack);

    int infixLength = strlen(infix);
    int prefixIndex = 0;

    // Reverse the infix expression
    for (int i = infixLength - 1; i >= 0; i--) {
        // If the character is an operand, add it to the prefix expression
        if (!isOperator(infix[i])) {
            prefix[prefixIndex++] = infix[i];
        }
        // If the character is an opening parenthesis, pop operators from the stack until a closing parenthesis is encountered
        else if (infix[i] == ')') {
            push(stack, infix[i]);
        }
        // If the character is an operator
        else if (isOperator(infix[i])) {
            while (!isEmpty(stack) && getPrecedence(stack->items[stack->top]) > getPrecedence(infix[i])) {
                prefix[prefixIndex++] = pop(stack);
            }
            push(stack, infix[i]);
        }
        // If the character is a closing parenthesis, pop operators from the stack until an opening parenthesis is encountered
        else if (infix[i] == '(') {
            while (!isEmpty(stack) && stack->items[stack->top] != ')') {
                prefix[prefixIndex++] = pop(stack);
            }
            pop(stack);
        }
    }

    // Pop any remaining operators from the stack
    while (!isEmpty(stack)) {
        prefix[prefixIndex++] = pop(stack);
    }

    // Reverse the prefix expression
    for (int i = 0, j = prefixIndex - 1; i < j; i++, j--) {
        char temp = prefix[i];
        prefix[i] = prefix[j];
        prefix[j] = temp;
    }

    // Add null terminator to the prefix expression
    prefix[prefixIndex] = '\0';

    // Free the memory allocated for the stack
    free(stack);
}

int main() {
    char infix[MAX_SIZE];
    char prefix[MAX_SIZE];

    printf("Enter an infix expression: ");
    fgets(infix, MAX_SIZE, stdin);

    // Remove newline character from the input
    infix[strcspn(infix, "\n")] = '\0';

    infixToPrefix(infix, prefix);

    printf("Prefix expression: %s\n", prefix);

    return 0;
}
